// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package root

import (
	"github.com/Khan/genqlient/graphql"
	"github.com/Mugen-Builders/cartesi-coprocessor-nonodox/configs"
	"github.com/Mugen-Builders/cartesi-coprocessor-nonodox/internal/infra/input_reader"
	"github.com/Mugen-Builders/cartesi-coprocessor-nonodox/internal/infra/node_reader"
	"github.com/Mugen-Builders/cartesi-coprocessor-nonodox/internal/usecase"
	"github.com/google/wire"
)

// Injectors from wire.go:

func NewTransactor() (*input_reader.InputReader, error) {
	client, err := configs.SetupTransactorWS()
	if err != nil {
		return nil, err
	}
	inputReader, err := input_reader.NewInputReader(client)
	if err != nil {
		return nil, err
	}
	return inputReader, nil
}

func NewFindOutputsByIdUseCase(graphqlUrl string, httpClient graphql.Doer) (*usecase.FindOutputsByIdUseCase, error) {
	client := graphql.NewClient(graphqlUrl, httpClient)
	nodeReader := node_reader.NewNodeReader(client)
	findOutputsByIdUseCase := usecase.NewFindOutputsByIdUseCase(client, nodeReader)
	return findOutputsByIdUseCase, nil
}

// wire.go:

var setTransactorProvider = wire.NewSet(configs.SetupTransactorWS, input_reader.NewInputReader)

var setFindOutputsByIdUseCase = wire.NewSet(graphql.NewClient, node_reader.NewNodeReader, wire.Bind(new(node_reader.NodeReaderRepository), new(*node_reader.NodeReader)), usecase.NewFindOutputsByIdUseCase)
